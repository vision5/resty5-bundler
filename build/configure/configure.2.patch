--- configure.1	2020-01-16 23:16:19.147064170 +0000
+++ configure.2	2020-01-17 08:31:33.770004734 +0000
@@ -1,6 +1,8 @@
 #!/usr/bin/env perl
 
-use 5.006;
+<TODOS>
+
+use 5.010;
 use strict;
 use warnings;
 
@@ -8,6 +10,8 @@
 use File::Spec;
 use File::Temp qw( tempfile tmpnam );
 
+<PERL_USES>
+
 sub shell ($@);
 sub env ($$);
 sub cd ($);
@@ -90,6 +94,11 @@
     [stream_lua => 'ngx_stream_lua'],
 );
 
+<NGINX_MODULES>
+<LUA_RESTY_LIBS>
+<C_LIBS_LIST>
+<C_LIBS_CONFIG>
+
 my $without_resty_mods_regex;
 {
     my $s = '^--without-('
@@ -120,7 +129,9 @@
     $with_resty_mods_regex = qr/$s/;
 }
 
-my $prefix = '/usr/local/openresty';
+<CONFIGURE_ARG_REGEXES>
+
+my $prefix = '/usr/local/resty5';
 my $ngx_sbin;
 my %resty_opts;
 my $dry_run;
@@ -346,11 +357,14 @@
         }
         $path = File::Spec->rel2abs($path);
         push @ngx_opts, "--with-$lib=$path";
+        $resty_opts{"no_bundled_$lib"} = 1;
 
     } elsif ($opt =~ /^--sbin-path=(.*)/) {
         $ngx_sbin = $1;
         push @ngx_opts, $opt;
 
+<CONFIGURE_ARG_TESTS>
+
     } elsif ($opt =~ /^--\w.*/) {
         push @ngx_opts, $opt;
 
@@ -444,6 +458,8 @@
     $ENV{$name} = $val;
 }
 
+<ENV_FUNCTIONS>
+
 sub shell ($@) {
     my ($cmd, $dry_run) = @_;
 
@@ -463,7 +479,7 @@
 
 sub auto_complete ($) {
     my $name = shift;
-    my @dirs = glob "$name-[0-9]*" or
+    my @dirs = glob "$name-[0-9]* $name-master*" or
         die "No source directory found for $name\n";
 
     if (@dirs > 1) {
@@ -479,6 +495,8 @@
     chdir $dir or die "failed to cd $dir: $!\n";
 }
 
+<BUILD_C_LIBS_FUNCTIONS>
+
 sub build_resty_opts {
     my $opts = shift;
 
@@ -629,6 +647,8 @@
 
     # build 3rd-party C libraries if required
 
+<BUILD_C_LIBS>
+
     if ($opts->{no_pool}) {
         if (! can_run("patch")) {
             die "no \"patch\" utility found in your PATH environment.\n";
@@ -1172,9 +1192,7 @@
                 "\$(MAKE) install$extra_opts";
         }
 
-        for my $key (qw(dns memcached redis mysql string upload websocket
-                        lock lrucache core upstream_healthcheck limit_traffic
-                        shell))
+        for my $key (@lua_resty_libs)
         {
             add_lua_lib($opts, "lua_resty", $key);
         }
@@ -1296,7 +1314,7 @@
     }
 }
 
-sub usage ($) {
+sub usage_openresty ($) {
     my $retval = shift;
     my $msg = <<'_EOC_';
   --help                             this message
@@ -1580,6 +1598,8 @@
     exit $retval;
 }
 
+<USAGE_FUNCTIONS>
+
 sub gen_makefile {
     if (-f 'Makefile') {
         unlink 'Makefile' or
